#+TITLE: Learn python the hard way
* Exercise 5 - 10 : About Printing  
- formatted string:
  1) f"the content of the string {variable_name_thats_supposed_2b_here} "
  2) Or just define the string first 
     s = "i am a string with undefined variable here {}"
     Later, you use s.format(provide_variable)
  3) print(message,end = "\n") the end parameter provides what to put at the 
     end of the message
- print(""" 
  A paragraph of message, the format of message will be exactly the same 
  as you typed
  """)
-  You can also use triple  """ to type special marks like quotation without 
   using the escape \

* Exercise 11: Take input 
  - Just use the input(prompt)  function
  - command pydoc (function) will help you understand what a fucntion does

* Exercise 13: Parameter, Unpacking, Variables
  - argv is the defualt variable that stores the programm's name and the 
    variable you pass to it on command line

* Exercise 15: Reading files
  - file = open(filename) 
  - file.close()
  - file.read() reads the whole file
  - file.readline()
  - file.truncate() empty the file
  - file.write(message)
  - file.seek(0) move the read/write location to the beginning of the file
  - os.path.exists(path) tests if a file exist or not 

* Exercise 18: Functions
  - Ways to define a function 
    1) def(*arg): 
           takes multiple arguments
    2) def(arg1, arg2 ..):
           takes defined multiple arguments
       
* Exercise 23: Strings, Bytes, and Character Encodings
  - line.strip(char) removes the char in a line, if nothing is provided removes
    all white spaces
  - unicode used 32 bit but it is too big, so we use the first 8 bit for the 
    most common characters and if an escape sign is met, the following 8 bit 
    appened on the previous 8 to make 16 bit, or more escape and make 32 bit,
    but it is a bit unclear to me as how they tell which escape to stop at 
    for each char

* Exercise 25: More Exercise

  - Things enclosed by """ """ will come out as documents of a fucntion 
    and can be retrieved by help(function_name)

* Exercise 26: Test Finished

* Exercise 27: Logic
  - for the key word and 
    A and B , python first evaluates the value of A, if it evaluates to false, 
    A's value is returned, else python evaluates B and its value is returned

* Exercise 35: Branches and Functions
  - exit(code)
    code == 0 ; no error
    code > 0; for every different number, you could assign a different 
              reason of error to it

* Exercise 37: Symbol review
  - assert 
    test if something is true
  - except 
    except ValueError as e: print(e)
    if exception happens, do this
  - del 
    del X[y]
    delte Y from dictionary X
  - finally 
    whether exceptions or not , do this in a try loop
  - global 
    declare global variable
  - raise 
    raise exception when things go wrong
  - to store things in byte 
    x = b'hello'
  - yield 
    works like a returning a list, but executes the loop just enough so that 
    one value is yielded in a loop, next time, you call the function that 
    include yield, the loop is ran again til another value is computed and 
    returned. Can save space and resource for computing things




