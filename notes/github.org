#+TITLE: Notes for starting to learn Github


* AI Nanodegree github
 1) Git is distributed system, in the sense that every computer has its own
    copy to be used offline
 2) Some commands to take notice to
    - git init 
      used to create brand new repository
    - git clone 
      clone a repo 
    - git status 
      check status of your repo
    - git log 
      show info about the past commits
      use "--stat" flag to see which files have been changed
      use "--p(atch)" to see the actual changed been made
      use "-p" + SHA to see the detailed info about a certain commit
      use "--decorate" to see which branch the header is pointing to
      "git log --graph --all" show a graph of commits of every branch
    - git show
      show info about the given commit
    - git show 
      works kind of like "git log -p"
      use "-w" ignore changes to whitespace
      use "--stat" to override  the "-p" default property of git show
    - git add
      add file from working directory to the staging index
      use "." to add everything under the current directory 
    - git commit 
      take file from staging index and save them in repository
    - git diff 
      show difference with two files
    - git tag
      add tags to commit like labels
      "tag -a version_number (SHA)", if the first six digit of SHA is not 
      provided, this tag will stick with the most recent commit 
      a tag sticks with a commit and a tag also contains message with it
      "tag -d version_number" it deletes a tag
    - git branch
      allows multiple threads of development
      just calling "git branch" will list all branches 
      providing a branch name will add that branch
      "git branch name SHA" will create a branch at the commit specified 
      by the SHA
      "-d name" is used to delete a branch,
      note you cannot delete a branch you are currently on, need 
      to switch to something else before you can do that
      "-D name" is used to force delete a branch because git will not let 
      you delete a branch if it has commits that are not merged 
    - git checkout
      swtich between different branches and tags
      it moves the header to the branch specified
      it basically looks at another snapshot taken at a potentially 
      different commit and revert every file into the condition there
      "git checkout -b new_branch old_branch" will create a new branch 
      based on the old one and checkout to it 
    - git merge
      combine changes on different branches
      "git merge name_of_branch_tobe_merged_into"
      the usual merge will find a commit that are in both branches
      then apply each changes recorded by the commits on both branches
      finally, it will made a commit to record the merge
      ATTENTION: when we merge, we always merge the changes from the 
      specified branch into the one we are currently checked out with
    - git reset --hard HEAD^
      if you made a wrong merge, this reverts things

 3) Telling git to ignore certain kinds of files
    - Firstly add .gitignore file 
    - Secondly, in the .gitignore file, add name of files to be ignored 
      Technique of globbing explained:
      when you define a name, it can be generalized for multiple files 
      whose name following the gneralization you define using the 
      following rules
      1) * matches 0 or more chars
      2) ? matches 1 character
      3) [abc] matched for a, b, or c
      4) ** matches nested directories ,
	 e.g: a/**/z equal to 
	     a/z
	     a/b/z
	     a/v/c/z 
	 [[https://www.gitignore.io/][Convenient .gitignore files]]
 4) fast forward merge, nothing changes to one branch, just moves it into
    a later time branch, i.e make the two branches now share the exact snapshot
    of the files





