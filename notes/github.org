#+TITLE: Notes for starting to learn Github


* AI Nanodegree github
 1) Git is distributed system, in the sense that every computer has its own
    copy to be used offline
 2) Some commands to take notice to
    - git init 
      used to create brand new repository
    - git clone 
      clone a repo 
    - git status 
      check status of your repo
    - git log 
      show info about the past commits
      use "--stat" flag to see which files have been changed
      use "--p(atch)" to see the actual changed been made
      use "-p" + SHA to see the detailed info about a certain commit
      use "--decorate" to see which branch the header is pointing to
      "git log --graph --all" show a graph of commits of every branch
    - git show
      show info about the given commit
    - git show 
      works kind of like "git log -p"
      use "-w" ignore changes to whitespace
      use "--stat" to override  the "-p" default property of git show
    - git add
      add file from working directory to the staging index
      use "." to add everything under the current directory 
    - git commit 
      take file from staging index and save them in repository
    - git diff 
      show difference with two files
    - git tag
      add tags to commit like labels
      "tag -a version_number (SHA)", if the first six digit of SHA is not 
      provided, this tag will stick with the most recent commit 
      a tag sticks with a commit and a tag also contains message with it
      "tag -d version_number" it deletes a tag
    - git branch
      allows multiple threads of development
      just calling "git branch" will list all branches 
      providing a branch name will add that branch
      "git branch name SHA" will create a branch at the commit specified 
      by the SHA
      "-d name" is used to delete a branch,
      note you cannot delete a branch you are currently on, need 
      to switch to something else before you can do that
      "-D name" is used to force delete a branch because git will not let 
      you delete a branch if it has commits that are not merged 
    - git checkout
      swtich between different branches and tags
      it moves the header to the branch specified
      it basically looks at another snapshot taken at a potentially 
      different commit and revert every file into the condition there
      "git checkout -b new_branch old_branch" will create a new branch 
      based on the old one and checkout to it 
    - git merge
      combine changes on different branches
      "git merge name_of_branch_tobe_merged_into"
      the usual merge will find a commit that are in both branches
      then apply each changes recorded by the commits on both branches
      finally, it will made a commit to record the merge
      ATTENTION: when we merge, we always merge the changes from the 
      specified branch into the one we are currently checked out with
    - git reset --hard HEAD^
      if you made a wrong merge, this reverts things
    - git commit --amend
      alter the most recent commit
      may be used to alter the message of the last commit
      Or, if you actually forget to change a file, you can just follow
      the process of a new commit to change that file but at the 
      git commit --amend, you add the "--amend" to the commit command
    - git revert (SHA-of-commit-to-revert)
      This simply applys the commit history backward, but it does not acutally
      delete the content of the commit 
    - git reset
      this is a very dangerous command, it deletes commits completely, 
      the commit becomes non-exisistent from the history, (however,you may use
      git reflog to retrieve that commit)
      * to revert and reset using reference to parent or grandparent commits
	HEAD^^...^(,2) : number of ^ indicates how many generations ago
	                  number following that indicates which parent it is
	                 remember you may have the branch that is been merged into (2_
	                 and the branch you are performing the merge  on (empty)
	HEAD~# : # indicates how many generations ago
      * Also you could provide the following three flags to tell git where
	you would like it to place the current commit's change into 
	--mixed (default) puts into working directory
	--soft to the staging index 
	--hard throw out into trash of every commit between the HEAD and SHA commit
      * Usually, it is a good idea to create git branch backup before you 
	do anything to the current branch, then you may merge backup into master
	which will cause the master yo be fast-forward merged into backup

	
 1) Telling git to ignore certain kinds of files
    - Firstly add .gitignore file 
    - Secondly, in the .gitignore file, add name of files to be ignored 
      Technique of globbing explained:
      when you define a name, it can be generalized for multiple files 
      whose name following the gneralization you define using the 
      following rules
      1) * matches 0 or more chars
      2) ? matches 1 character
      3) [abc] matched for a, b, or c
      4) ** matches nested directories ,
	 e.g: a/**/z equal to 
	     a/z
	     a/b/z
	     a/v/c/z 
	 [[https://www.gitignore.io/][Convenient .gitignore files]]
 2) fast forward merge, nothing changes to one branch, just moves it into
    a later time branch, i.e make the two branches now share the exact snapshot
    of the files
 3) Some useful links 
    [[https://dotfiles.github.io/][some configuration files of others]]
    [[https://github.com/jlord/git-it-electron][Game for practise git commands]]
 4) Remote repositories 
    - git remote
      git remote add +URL 
      it is used to add a local repository onto github
    - git push
      the same command is provided to git push as git pull
    - git pull
      need to provide name of the remote (origin)  and branch name 
      (master) to pull
      this will automatically merge your local branch with the remote branch
      if you do not want this feature, run git fetch
    - git fetch
      retrieves the commits and creates another branch
      can latter use git merger to merge the local master branch into the origin/master
    - git merge A
      the current branch is moved and merged into A
    - git pull cannot be used when the local has commits that the remote do not
      you will have to use git fetch and then merge
    - Take note that origin/master is the branch name on a local machine that 
      indicates where the remote's branch is. On the remote machine that branch
      is simply called master
